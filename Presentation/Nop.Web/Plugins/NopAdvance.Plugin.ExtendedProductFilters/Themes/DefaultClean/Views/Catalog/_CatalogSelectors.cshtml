
@model CatalogProductsModel
@using Nop.Core.Domain.Catalog
@using Nop.Services.Localization
@inject ILocalizationService _localizationService

@using NopAdvance.Plugin.Core.Domain
@{
    var pluginLicenseStatus = LicenceHelper.GetPluginStatus(PluginLicence.LicenceType, extendedFiltersSettings.PluginInfo);
    var isPluginPaidOrTrial = pluginLicenseStatus == PluginLicenceStatusType.Registered || pluginLicenseStatus == PluginLicenceStatusType.Trial;
}

@if (Model.Products.Count <= 0 &&
     !Model.PriceRangeFilter.Enabled &&
     !Model.SpecificationFilter.Enabled &&
     !Model.ManufacturerFilter.Enabled)
{
    return;
}

<div class="product-selectors">
    @*view mode*@
    @if (Model.AllowProductViewModeChanging)
    {
        <div class="product-viewmode">
            <span>@T("Catalog.ViewMode")</span>
            @if (Model.AvailableViewModes.Count > 1)
            {
                var gridMode = Model.AvailableViewModes[0];
                var listMode = Model.AvailableViewModes[1];

                <a class="viewmode-icon grid @if (gridMode.Selected){<text>selected</text>}" data-viewmode="@gridMode.Value" title="@gridMode.Text">@gridMode.Text</a>
                <a class="viewmode-icon list @if (listMode.Selected){<text>selected</text>}" data-viewmode="@listMode.Value" title="@listMode.Text">@listMode.Text</a>
            }
        </div>
        <script asp-location="Footer">
            $(document).ready(function () {
                var $viewModeEls = $('[data-viewmode]');
                $viewModeEls.on('click', function () {
                    if (!$(this).hasClass('selected')) {
                        $viewModeEls.toggleClass('selected');
                        CatalogProducts.getProducts();
                    }
                    return false;
                });

                $(CatalogProducts).on('before', function (e) {
                    var $viewModeEl = $('[data-viewmode].selected');
                    if ($viewModeEl) {
                        e.payload.urlBuilder
                            .addParameter('viewmode', $viewModeEl.data('viewmode'));
                    }
                });
            });
        </script>
    }

    @if (Model.AllowProductSorting)
    {
        foreach (var sortOption in Model.AvailableSortOptions)
        {
            sortOption.Text = await _localizationService.GetLocalizedEnumAsync((ProductSortingEnum)int.Parse(sortOption.Value));
        }
        <div class="product-sorting">
            <span>@T("Catalog.OrderBy")</span>
            @Html.DropDownList("products-orderby", Model.AvailableSortOptions, new { aria_label = T("Catalog.OrderBy.Label") })
        </div>
        <script asp-location="Footer">
            $(document).ready(function () {
                var $orderByEl = $('#products-orderby');
                $orderByEl.on('change', function () {
                    CatalogProducts.getProducts();
                });

                $(CatalogProducts).on('before', function (e) {
                    e.payload.urlBuilder
                        .addParameter('orderby', $orderByEl.val());
                });
            });
        </script>
    }

    @if (Model.AllowCustomersToSelectPageSize)
    {
        <div class="product-page-size">
            <span>@T("Catalog.PageSize")</span>
            @Html.DropDownList("products-pagesize", Model.PageSizeOptions, new { aria_label = T("Catalog.PageSize.Label") })
            <span>@T("Catalog.PageSize.PerPage")</span>
        </div>
        <script asp-location="Footer">
            $(document).ready(function () {
                var $pageSizeEl = $('#products-pagesize');
                $pageSizeEl.on('change', function () {
                    CatalogProducts.getProducts();
                });

                $(CatalogProducts).on('before', function (e) {
                    e.payload.urlBuilder
                        .addParameter('pagesize', $pageSizeEl.val());
                });
            });
        </script>
    }


    
    @if (isPluginPaidOrTrial && extendedFiltersSettings.ShowNumberOfProducts)
    {
        <div class="number-of-products">
            <span id="number-of-products"></span>
            <span id="number-of-products-no-results" hidden>0 results found</span>
        </div>
        <script asp-location="Footer">
            $(document).on('ready', function () {
                getSummary();
                $(CatalogProducts).on('loaded', function () {
                    getSummary();
                });

                function getSummary() {

                    var productsFound = $('.products-wrapper .no-result').length == 0;
                    if ($('.total-summary').length > 0 && productsFound) {
                        var summary = $('.total-summary').html();

                        var start_index =  summary.indexOf('(');
                        var end_index = summary.indexOf('total');

                        var numberOfProducts = summary.substr(start_index + 1, end_index - start_index - 1);
                        var textToDisplay = numberOfProducts + " results found";
                        
                        $('#number-of-products-no-results').hide();
                        $('#number-of-products').html(textToDisplay);
                        $('#number-of-products').show();
                    }
                    else{
                        $('#number-of-products').hide();
                        $('#number-of-products-no-results').show();
                    }
                }
            });
        </script>
    }
</div>
