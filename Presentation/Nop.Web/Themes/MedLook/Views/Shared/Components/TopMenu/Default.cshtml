@model TopMenuModel

@using Nop.Core
@using Nop.Services.Customers
@using Nop.Core.Domain.Topics


@inject IWorkContext workContext
@inject ICustomerService customerService
@inject IWebHelper webHelper

@{
    var isRegisterCustomer = await customerService.IsRegisteredAsync(await workContext.GetCurrentCustomerAsync());
    var rootCategoriesResponsive = Model.Categories.ToList();

    <header class="nav-top">
        <span class="hamburger material-icons" id="ham">menu</span>
    </header>

    <nav class="nav-drill">
        <ul class="nav-items nav-level-1">
            @if (Model.DisplayHomepageMenuItem)
            {
                <li class="nav-item">
                    <a class="nav-link" href="@Url.RouteUrl("Homepage")">@T("Homepage")</a>
                </li>
            }

            @foreach (var category in rootCategoriesResponsive)
            {
                var categoryLineModel = new TopMenuModel.CategoryLineModel
                {
                    Category = category,
                    ResponsiveMobileMenu = true
                };
                @await Html.PartialAsync("_CategoryLine.TopMenu", categoryLineModel)
            }

            @foreach (var topic in Model.Topics)
            {
                <li class="nav-item">
                    <a class="nav-link" href="@(Url.RouteUrl<Topic>(new { SeName = topic.SeName }))">@topic.Name</a>
                </li>
            }

            @if (Model.DisplayContactUsMenuItem)
            {
                <li class="nav-item">
                    <a class="nav-link" href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a>
                </li>
            }

            @if (isRegisterCustomer)
            {
                @if (Model.DisplayCustomerInfoMenuItem)
                {
                    <li class="nav-item">
                        <a class="nav-link" href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a>
                    </li>
                }
                <li class="nav-item">
                    <a class="nav-link" href="@Url.RouteUrl("Logout")">@T("Account.Logout")</a>
                </li>
            }
            else
            {
                var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url)
                ? url.ToString()
                : webHelper.GetRawUrl(Context.Request);
                <li class="nav-item">
                    <a class="nav-link" href="@Url.RouteUrl("Login", new { returnUrl })">@T("Account.Login")</a>
                </li>
            }

        </ul>
    </nav>



    <script asp-location="Footer">
        $(document).ready(function () {
            const navExpand = [].slice.call(document.querySelectorAll('.nav-expand'));
            const backLink = `<li class="nav-item"><a class="nav-link nav-back-link" href="javascript:;">Back</a></li>`;

            navExpand.forEach(item => {
                const navExpandContent = item.querySelector('.nav-expand-content');
                if (navExpandContent)
                    navExpandContent.insertAdjacentHTML('afterbegin', backLink);
                const navLink = item.querySelector('.nav-link');
                if (navLink)
                    navLink.addEventListener('click', () => item.classList.add('active'));
                const navBackLink = item.querySelector('.nav-back-link');
                if (navBackLink)
                    navBackLink.addEventListener('click', () => item.classList.remove('active'));
            })


            // ---------------------------------------
            // not-so-important stuff starts here

            const ham = document.getElementById('ham');
            ham.addEventListener('click', function () {
                document.body.classList.toggle('nav-is-toggled');
            })
        });
    </script>
}