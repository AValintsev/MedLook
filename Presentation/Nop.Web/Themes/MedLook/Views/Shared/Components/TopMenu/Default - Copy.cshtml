@model TopMenuModel

@using Nop.Core
@using Nop.Services.Customers
@using Nop.Core.Domain.Topics


@inject IWorkContext workContext
@inject ICustomerService customerService
@inject IWebHelper webHelper

@{
    var isRegisterCustomer = await customerService.IsRegisteredAsync(await workContext.GetCurrentCustomerAsync());
    var rootCategoriesResponsive = Model.Categories.ToList();

    <input id="menu__toggle" type="checkbox" />
    <label class="hamburger-box menu__btn hamburger hamburger--slider" for="menu__toggle">
        <span class="hamburger-inner"></span>
    </label>


    <div class="mobile-menu js-mobile-menu">

        <div class="mobile-menu-inner">
            <div class="mobile-menu--body">
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MobHeaderMenuBefore })

                <nav>

                    @if (Model.DisplayHomepageMenuItem)
                    {
                        <li class="mobile-nav--item js-mobile-nav-item ">
                            <a href="@Url.RouteUrl("Homepage")">@T("Homepage")</a>
                        </li>
                    }

                    @foreach (var category in rootCategoriesResponsive)
                    {
                        var categoryLineModel = new TopMenuModel.CategoryLineModel
                {
                    Category = category,
                    ResponsiveMobileMenu = true
                };
                        @await Html.PartialAsync("_CategoryLine.TopMenu", categoryLineModel)
                    }

                    @foreach (var topic in Model.Topics)
                    {
                        <li class="mobile-nav--item js-mobile-nav-item ">
                            <a href="@(Url.RouteUrl<Topic>(new { SeName = topic.SeName }))">@topic.Name</a>
                        </li>
                    }

                    @if (Model.DisplayProductSearchMenuItem)
                    {
                        <li class="mobile-nav--item js-mobile-nav-item ">
                            <a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a>
                        </li>
                    }
                    @if (Model.DisplayContactUsMenuItem)
                    {
                        <li class="mobile-nav--item js-mobile-nav-item ">
                            <a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a>
                        </li>
                    }

                    @if (isRegisterCustomer)
                    {
                        @if (Model.DisplayCustomerInfoMenuItem)
                        {
                            <li class="mobile-nav--item js-mobile-nav-item ">
                                <a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a>
                            </li>
                        }
                        <li class="mobile-nav--item js-mobile-nav-item ">
                            <a href="@Url.RouteUrl("Logout")">@T("Account.Logout")</a>
                        </li>
                    }
                    else
                    {
                        var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url)
                        ? url.ToString()
                        : webHelper.GetRawUrl(Context.Request);
                        <li class="mobile-nav--item js-mobile-nav-item ">
                            <a href="@Url.RouteUrl("Login", new { returnUrl })">@T("Account.Login")</a>
                        </li>
                    }
                    <li class="mobile-nav--item js-mobile-nav-item ">
                        @await Component.InvokeAsync("LanguageSelector")
                    </li>
                </nav>

            </div>
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MobHeaderMenuAfter })
        </div>
    </div>
}