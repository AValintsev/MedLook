@using Nop.Core
@model RegisterModel
@inject IWorkContext workContext
@inject IWebHelper webHelper

@{
    Layout = "_ColumnsOne";

    //title
    NopHtml.AddTitleParts(T("PageTitle.Register").Text);
    //page class
    NopHtml.AppendPageCssClassParts("html-registration-page");

    var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url)
    ? url.ToString()
    : webHelper.GetRawUrl(Context.Request);
}

<div class="page registration-page">
    <div class="page-title">
        <h1>@T("Account.Register")</h1>
    </div>
    <div class="page-body">
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.RegisterTop, additionalData = Model })
        <form asp-route="Register" asp-route-returnurl="@Context.Request.Query["ReturnUrl"]" method="post" autocomplete="off">
            <div asp-validation-summary="ModelOnly" class="message-error"></div>
            <div class="fieldset">
                <div class="title">
                    <strong>@T("Account.YourPersonalDetails")</strong>
                </div>
                <div class="form-fields">

                    @if (Model.FirstNameEnabled)
                    {
                        <div class="inputs">
                            <div class="label-container">
                                <label asp-for="FirstName" asp-postfix=":"></label>
                                @if (Model.FirstNameRequired)
                                {
                                    <nop-required />
                                }
                            </div>
                            <input asp-for="FirstName" />
                            <span asp-validation-for="FirstName"></span>
                        </div>
                    }
                    @if (Model.LastNameEnabled)
                    {
                        <div class="inputs">
                            <div class="label-container">

                                <label asp-for="LastName" asp-postfix=":"></label>
                                @if (Model.LastNameRequired)
                                {
                                    <nop-required />
                                }
                            </div>
                            <input asp-for="LastName" />
                            <span asp-validation-for="LastName"></span>
                        </div>
                    }
                    @if (Model.PhoneEnabled)
                    {
                        <div class="inputs">
                            <div class="label-container">

                                <label asp-for="Phone" asp-postfix=":"></label>
                                @if (Model.PhoneRequired)
                                {
                                    <nop-required />
                                }
                            </div>
                            <input asp-for="Phone" />
                            <span asp-validation-for="Phone"></span>
                        </div>
                    }
                    <div class="inputs">
                        <div class="label-container">
                            <label asp-for="Email" asp-postfix=":"></label>
                            <nop-required />
                        </div>
                        <input asp-for="Email" />
                        <span asp-validation-for="Email"></span>
                    </div>
                    @if (Model.EnteringEmailTwice)
                    {
                        <div class="inputs">
                            <div class="label-container">

                                <label asp-for="ConfirmEmail" asp-postfix=":"></label>
                                <nop-required />
                            </div>
                            <input asp-for="ConfirmEmail" />
                            <span asp-validation-for="ConfirmEmail"></span>
                        </div>
                    }
                    @if (Model.UsernamesEnabled)
                    {
                        <div class="inputs">
                            <div class="label-container">
                                <label asp-for="Username" asp-postfix=":"></label>
                                <nop-required />
                            </div>
                            <input asp-for="Username" />
                            <span asp-validation-for="Username"></span>
                            @if (Model.CheckUsernameAvailabilityEnabled)
                            {
                                @await Html.PartialAsync("_CheckUsernameAvailability")
                            }
                        </div>

                    }

                    <div class="inputs">
                        <div class="label-container">
                            <label asp-for="Password" asp-postfix=":"></label>
                            <nop-required />
                        </div>
                        <input asp-for="Password" />
                        <span asp-validation-for="Password"></span>
                    </div>
                    <div class="inputs">
                        <div class="label-container">
                            <label asp-for="ConfirmPassword" asp-postfix=":"></label>
                            <nop-required />
                        </div>
                        <input asp-for="ConfirmPassword" />
                        <span asp-validation-for="ConfirmPassword"></span>
                    </div>
                    @if (Model.DisplayCaptcha)
                    {
                        <nop-captcha />
                    }
                    @if (Model.HoneypotEnabled)
                    {
                        @Html.Raw(Html.GenerateHoneypotInput())
                    }
                </div>
                <div class="buttons buttons-container">
                    <button type="submit" name="register-button" id="register-button" class="button-1 register-next-step-button">@T("Account.Register.Button")</button>
                    <div class="external-authentication">
                        @await Component.InvokeAsync(typeof(ExternalMethodsViewComponent), "ExternalAuthentication")
                    </div>
                    <div>
                        <div>@T("Account.DoYouHave")</div>

                        <a class="nav-link" href="@Url.RouteUrl("Login", new { returnUrl })">@T("Account.Login")</a>
                    </div>
                </div>
            </div>

            @if (Model.AcceptPrivacyPolicyEnabled || Model.GdprConsents.Count > 0)
            {
                <div class="fieldset">
                    <div class="title">
                        <strong>@T("Account.UserAgreement")</strong>
                    </div>
                    <div class="form-fields">
                        @if (Model.AcceptPrivacyPolicyEnabled)
                        {
                            <script asp-location="Footer">
                                $(document).ready(function() {
                                    $('#register-button').on('click', function() {
                                        if ($('#accept-consent').is(':checked')) {
                                            //do some stuff
                                            return true;
                                        } else {
                                            //just show validation errors, don't post
                                            alert('@Html.Raw(JavaScriptEncoder.Default.Encode(T("Account.Fields.AcceptPrivacyPolicy.Required").Text))');
                                            return false;
                                        }
                                    });
                                });
                            </script>
                            <div class="inputs accept-consent">
                                <input id="accept-consent" type="checkbox" name="accept-consent" />
                                <label for="accept-consent">@T("Account.Fields.AcceptPrivacyPolicy")</label>
                                @if (Model.AcceptPrivacyPolicyPopup)
                                {
                                    <span class="read" id="read-privacyinfo">@T("Account.Fields.AcceptPrivacyPolicy.Read")</span>
                                    <script asp-location="Footer">
                                        $(document).ready(function() {
                                            $('#read-privacyinfo').on('click',
                                                function(e) {
                                                    displayPopupContentFromUrl(
                                                        '@Url.RouteUrl("TopicPopup", new { SystemName = "privacyinfo" })',
                                                        '@T("Account.Fields.AcceptPrivacyPolicy")');
                                                });
                                        });
                                    </script>
                                }
                                else
                                {
                                    <a class="read" id="read-privacyinfo" href="@Url.RouteTopicUrl("privacyinfo")">@T("Account.Fields.AcceptPrivacyPolicy.Read")</a>
                                }
                            </div>
                        }

                        @if (Model.GdprConsents.Count > 0)
                        {
                            foreach (var consent in Model.GdprConsents)
                            {
                                if (consent.IsRequired)
                                {
                                    <script asp-location="Footer">
                                        $(document).ready(function() {
                                            $('#register-button').on('click', function() {
                                                if ($('#consent@(consent.Id)').is(':checked')) {
                                                        //do some stuff
                                                        return true;
                                                    } else {
                                                        //just show validation errors, don't post
                                                   alert('@Html.Raw(JavaScriptEncoder.Default.Encode(consent.RequiredMessage))');
                                                        return false;
                                                    }
                                                });
                                        });
                                    </script>
                                }
                                <div class="inputs accept-consent">
                                    <input id="consent@(consent.Id)" type="checkbox" name="consent@(consent.Id)" checked="@consent.Accepted" />
                                    <label for="consent@(consent.Id)">@consent.Message</label>
                                </div>
                            }

                        }
                    </div>
                </div>
            }
        </form>

        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.RegisterBottom, additionalData = Model })
    </div>
</div>